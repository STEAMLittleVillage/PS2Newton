# 6.00 Problem Set 2
#
# Successive Approximation
#


"""
    Computes the polynomial function for a given value x. Returns that value.

    Example:
    >>> poly = (0.0, 0.0, 5.0, 9.3, 7.0)    # f(x) = 7x^4 + 9.3x^3 + 5x^2
    >>> x = -13
    >>> print evaluate_poly(poly, x)  # f(-13) = 7(-13)^4 + 9.3(-13)^3 + 5(-13)^2
    180339.9

    poly: tuple of numbers, length > 0
    x: number
    returns: float
"""
# TO DO ... 

def evaluate_poly(poly, x):
    degree=len(poly)-1
##    print 'degree: ' +str(degree)
    f=0
    for n in range(degree+1):
        f+=poly[n]*(x**n)
    return f
##  print ("for n=" +str(n) + "f(" +str(x) +")=" +str(f))
##  print ("f(" +str(x) +")=" +str(f))
    

        
"""
    Computes and returns the derivative of a polynomial function. If the
    derivative is 0, returns (0.0,).

    Example:
    >>> poly = (-13.39, 0.0, 17.5, 3.0, 1.0)    # x^4 + 3x^3 + 17.5x^2 - 13.39
    >>> print compute_deriv(poly)        # 4x^3 + 9x^2 + 35^x
    (0.0, 35.0, 9.0, 4.0)

    poly: tuple of numbers, length > 0
    returns: tuple of numbers
"""
# TO DO ... 

def compute_deriv(poly):
    dpoly=[]
    for n in range(1,len(poly)):
        dpoly.append(float(poly[n]*(n))
    return (dpoly)
    print (dpoly)
     
    
"""
    Uses Newton's method to find and return a root of a polynomial function.
    Returns a tuple containing the root and the number of iterations required
    to get to the root.

    Example:
    >>> poly = (-13.39, 0.0, 17.5, 3.0, 1.0)    #x^4 + 3x^3 + 17.5x^2 - 13.39
    >>> x_0 = 0.1
    >>> epsilon = .0001
    >>> print compute_root(poly, x_0, epsilon)
    (0.80679075379635201, 8.0)

    poly: tuple of numbers, length > 1.
         Represents a polynomial function containing at least one real root.
         The derivative of this polynomial function at x_0 is not 0.
    x_0: float
    epsilon: float > 0
    returns: tuple (float, int)
"""
# TO DO ... 
    
def compute_root(poly, x_0, epsilon):
    dpoly=compute_deriv(poly)
    f=evaluate_poly(poly, x_0)
    x_n=x_0
    n=1
    while abs(f)>=epsilon:
        fderiv=evaluate_poly(dpoly,x_n)
        x_n-=(f/fderiv)
        n+=1
        f=evaluate_poly(poly, x_n)
        print ((x_n,n))
    
        

